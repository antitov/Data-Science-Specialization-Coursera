l
ls
search()
kernsmooth
KermSmooth
search()
install.packages(c("codetools", "lattice", "MASS", "Matrix", "mgcv"))
library(devtools)
remove.packages("KernSmooth")
install.packages("KernSmooth")
## Function makes special "matrix" object. There is a matrix-type check at the beginning.
## If an argument is not a matrix function will return an error.
## MakeCacheMatris is a list of functions that
## 1. get value of the matrix
## 2. set value of the matrix
## 3. get the inversed matrix
## 4. set the inversed matrix
## To be noted: there is no check if matrix is singular (therefore noninvertable).
## So matrix should be invertable to use cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## cacheSolve() calculates the inversed matrix of a special "matrix" created by makeCacheMatrix()
## If matrix is noninvertable then cacheSolve() will return an error.
## Also matrix inversion can be appied only to square matrixes.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)) {
message("Getting cached inverted matrix")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(inv)
inv
}
## Function makes special "matrix" object. There is a matrix-type check at the beginning.
## If an argument is not a matrix function will return an error.
## MakeCacheMatris is a list of functions that
## 1. get value of the matrix
## 2. set value of the matrix
## 3. get the inversed matrix
## 4. set the inversed matrix
## To be noted: there is no check if matrix is singular (therefore noninvertable).
## So matrix should be invertable to use cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## cacheSolve() calculates the inversed matrix of a special "matrix" created by makeCacheMatrix()
## If matrix is noninvertable then cacheSolve() will return an error.
## Also matrix inversion can be appied only to square matrixes.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)) {
message("Getting cached inverted matrix")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(inv)
inv
}
mat <- makeCacheMatrix()
## Function makes special "matrix" object. There is a matrix-type check at the beginning.
## If an argument is not a matrix function will return an error.
## MakeCacheMatris is a list of functions that
## 1. get value of the matrix
## 2. set value of the matrix
## 3. get the inversed matrix
## 4. set the inversed matrix
## To be noted: there is no check if matrix is singular (therefore noninvertable).
## So matrix should be invertable to use cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## cacheSolve() calculates the inversed matrix of a special "matrix" created by makeCacheMatrix()
## If matrix is noninvertable then cacheSolve() will return an error.
## Also matrix inversion can be appied only to square matrixes.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)) {
message("Getting cached inverted matrix")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(inv)
inv
}
## Function makes special "matrix" object. There is a matrix-type check at the beginning.
## If an argument is not a matrix function will return an error.
## MakeCacheMatris is a list of functions that
## 1. get value of the matrix
## 2. set value of the matrix
## 3. get the inversed matrix
## 4. set the inversed matrix
## To be noted: there is no check if matrix is singular (therefore noninvertable).
## So matrix should be invertable to use cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## cacheSolve() calculates the inversed matrix of a special "matrix" created by makeCacheMatrix()
## If matrix is noninvertable then cacheSolve() will return an error.
## Also matrix inversion can be appied only to square matrixes.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if (!is.null(inv)) {
message("Getting cached inverted matrix")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setinv(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
if(class(x)!="matrix") {
message("Error: Please feed the matrix to the function."
"You were trying to feed a ", class(x), " instead of a matrix")
return()
}
set <- function(y) {
if(class(y)!="matrix") {
message("Error: Please feed the matrix to the function.",
"You were trying to feed a ... ", class(y), " instead of a matrix")
return()
}
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
install.packages(httr)
find.package(httr)
download.packages(httr)
getwd()
setwd("C:/Users/a.titov/rprog")
install.packages(httr)
available.packages()
install.packages(httr)
install.packages("httr")
library("httr")
library("xlsx")
install.packages("xlsx")
# 4. Use API
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "a6c09ddeb6351b4efe4f",
secret = "3a65eb54d23155e42b9836b1fb638524859678cc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("XML")
library("XML")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "a6c09ddeb6351b4efe4f",
secret = "3a65eb54d23155e42b9836b1fb638524859678cc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
myapp <- oauth_app("github",
key = "a6c09ddeb6351b4efe4f",
secret = "3a65eb54d23155e42b9836b1fb638524859678cc")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken
gtoken$R6
gtoken$Token
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "a6c09ddeb6351b4efe4f",
secret = "3a65eb54d23155e42b9836b1fb638524859678cc")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
# OR:
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
key = "a6c09ddeb6351b4efe4f",
secret = "3a65eb54d23155e42b9836b1fb638524859678cc")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
install.packages("jsonlite")
