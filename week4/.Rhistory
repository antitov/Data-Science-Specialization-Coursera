}
tail(rankall("heart failure"), 10)
worst <- function(state, outcome) {
#checking for statre validity
statelist <- sort(unique(outcomeData$State))
if (sum(state == statelist)!=1) {
errormsg <- "invalid state"
stop(errormsg)
}
#setting apriori values for outcome
outchk <- c("heart attack","heart failure","pneumonia")
#checking index number for outcome in outchk list
indout <- seq_along(outchk)[sapply(outchk, FUN=function(X) outcome %in% X)]
#checking for outcome values : HA, HF, Pn
if (sum(outcome == outchk)!=1) {
errormsg <- "invalid outcome"
stop(errormsg)
}
#replacing all spaces to dots in "outcome" to assing non-spaces valuens to names()
outchkDot <- gsub(" ", ".", outchk)
#creating apriori list of names(outcome)
outcomematr <- as.list(c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
names(outcomematr) <- outchkDot #assigned dot-space-replaced outcomes as names
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
statematr <- outcomeData$State == state
outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
outcomelogic <- outcomevalue == max(outcomevalue)
#finding best Hospital and getting the aphabetically first one if there is more than 1
besthosp <- outcomeData[statematr,][outcomelogic,]$Hospital.Name
if(length(besthosp)==1) {
return(besthosp)
}
else {
bestLetters <- substr(besthosp[1:length(besthosp)], 1, 1)
besthosp <- besthosp[bestLetters == min(bestLetters)]
return(besthosp)
}
#outcomematr[outchkDot[indout]]
#min(outcome[TXstate,]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
#TXstate <- (outcome$State =="TX")
#outcome[TXstate,][as.character(outcomematr[outchkDot[indout]])]
}
worst("WI","pneumonia")
rankall <- function(outcome, num = "best") {
outchk <- c("heart attack","heart failure","pneumonia")
#checking index number for outcome in outchk list
indout <- seq_along(outchk)[sapply(outchk, FUN=function(X) outcome %in% X)]
#checking for outcome values : HA, HF, Pn
if (sum(outcome == outchk)!=1) {
errormsg <- "invalid outcome"
stop(errormsg)
}
#replacing all spaces to dots in "outcome" to assing non-spaces valuens to names()
outchkDot <- gsub(" ", ".", outchk)
#creating apriori list of names(outcome)
outcomematr <- as.list(c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
names(outcomematr) <- outchkDot #assigned dot-space-replaced outcomes as names
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
#statematr <- outcomeData$State == state
#outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
#outcomelogic <- outcomevalue == min(outcomevalue)
#sorting outData by outcome and hospital name
#outcomestate <- outcomeData[statematr,]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
statelist <- sort(unique(outcomeData$State))
if(num=="best") {
rankedall <- vapply(as.list(statelist),best, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
}
if(num=="worst") {
rankedall <- vapply(as.list(statelist),worst, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
#outranked <- outcomeData[with(outcomeData, order(-outcomesubset, Hospital.Name)), ]
#out <- data.frame(as.character(outranked$Hospital.Name),as.character(outranked$State))
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
#return(out)
}
outranked <- outcomeData[with(outcomeData, order(-outcomesubset, Hospital.Name)), ]
out <- data.frame(as.character(outranked$Hospital.Name),as.character(outranked$State))
names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
out <- out[1:num,]
return(out)
}
tail(rankall("pneumonia", "worst"), 3)
submit()
submit()
submit()
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
#statematr <- outcomeData$State == state
#outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
#outcomelogic <- outcomevalue == min(outcomevalue)
#sorting outData by outcome and hospital name
#outcomestate <- outcomeData[statematr,]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name)), ]
head(outranked[outranked$State=="TX"])
head(outranked[outranked$State=="TX",])
as.character(outcomematr[outchkDot[indout]])
outranked[outranked$State=="TX",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
outranked[outranked$State=="AK",]
outranked[outranked$State=="FL",20]$Hospital.name
outranked[outranked$State=="FL",20]$Hospital.Name
outranked[outranked$State=="FL",20]
outranked[outranked$State=="FL",20]
outranked[outranked$State=="FL",][20,]
outranked[outranked$State=="FL",][20,]["Hospital.Name"]
outranked[outranked$State=="FL",][20,]["Hospital.Name"][1,]
statelist <- sort(unique(outcomeData$State))
outranked[outranked$State==statelist,][20,]["Hospital.Name"][1,]
outranked[outranked$State=="FL",][20,]["Hospital.Name"][1,]
rankbystate <- function (state) {
outranked[outranked$State==state,][num,]["Hospital.Name"][1,]
}
num <- 20
rankedall <- vapply(as.list(statelist), rankbystate FUN.VALUE = character(1))
rankedall <- vapply(as.list(statelist), rankbystate, FUN.VALUE = character(1))
head(rankedall)
rankall <- function(outcome, num = "best") {
outchk <- c("heart attack","heart failure","pneumonia")
#checking index number for outcome in outchk list
indout <- seq_along(outchk)[sapply(outchk, FUN=function(X) outcome %in% X)]
#checking for outcome values : HA, HF, Pn
if (sum(outcome == outchk)!=1) {
errormsg <- "invalid outcome"
stop(errormsg)
}
#replacing all spaces to dots in "outcome" to assing non-spaces valuens to names()
outchkDot <- gsub(" ", ".", outchk)
#creating apriori list of names(outcome)
outcomematr <- as.list(c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
names(outcomematr) <- outchkDot #assigned dot-space-replaced outcomes as names
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
#statematr <- outcomeData$State == state
#outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
#outcomelogic <- outcomevalue == min(outcomevalue)
#sorting outData by outcome and hospital name
#outcomestate <- outcomeData[statematr,]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
statelist <- sort(unique(outcomeData$State))
if(num=="best") {
rankedall <- vapply(as.list(statelist),best, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
}
if(num=="worst") {
rankedall <- vapply(as.list(statelist),worst, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
#outranked <- outcomeData[with(outcomeData, order(-outcomesubset, Hospital.Name)), ]
#out <- data.frame(as.character(outranked$Hospital.Name),as.character(outranked$State))
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
#return(out)
}
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name)), ]
rankbystate <- function (state) {
outranked[outranked$State==state,][num,]["Hospital.Name"][1,]
}
rankedall <- vapply(as.list(statelist),rankbystate, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
return(out)
}
head(rankall("heart attack", 20), 10)
submit()
submit()
rankall("heart failure", 10)
submit()
!length(1:2)
length(1:2)
length(0)
!length(0)
rankall("heart failure", 10)
head(rankall("heart failure"))
head(rankall("heart failure",1))
head(rankall("heart failure",10))
rankall <- function(outcome, num = "best") {
outchk <- c("heart attack","heart failure","pneumonia")
#checking index number for outcome in outchk list
indout <- seq_along(outchk)[sapply(outchk, FUN=function(X) outcome %in% X)]
#checking for outcome values : HA, HF, Pn
if (sum(outcome == outchk)!=1) {
errormsg <- "invalid outcome"
stop(errormsg)
}
#replacing all spaces to dots in "outcome" to assing non-spaces valuens to names()
outchkDot <- gsub(" ", ".", outchk)
#creating apriori list of names(outcome)
outcomematr <- as.list(c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
names(outcomematr) <- outchkDot #assigned dot-space-replaced outcomes as names
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
#statematr <- outcomeData$State == state
#outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
#outcomelogic <- outcomevalue == min(outcomevalue)
#sorting outData by outcome and hospital name
#outcomestate <- outcomeData[statematr,]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
statelist <- sort(unique(outcomeData$State))
if(num=="best") {
rankedall <- vapply(as.list(statelist),best, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
}
if(num=="worst") {
rankedall <- vapply(as.list(statelist),worst, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
#outranked <- outcomeData[with(outcomeData, order(-outcomesubset, Hospital.Name)), ]
#out <- data.frame(as.character(outranked$Hospital.Name),as.character(outranked$State))
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
#return(out)
}
outranked <- outcomeData[with(outcomeData, order(outcomesubset)), ]
rankbystate <- function (state) {
outranked[outranked$State==state,][num,]["Hospital.Name"][1,]
}
rankedall <- vapply(as.list(statelist),rankbystate, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
return(out)
}
head(rankall("heart failure",10))
rankbystate <- function (state, num) {
outranked[outranked$State==state,][num,]["Hospital.Name"][1,]
}
rankbystate("AK",1)
indexo
indout
indout <- 2
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
rankbystate("AK",1)
tail(rankall("heart failure"), 10)
best("TN","heart failure")
outcomeData["WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL"]
outcomeData["WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL",]
outcomeData["WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
best <- function(state, outcome) {
#checking for statre validity
statelist <- sort(unique(outcomeData$State))
if (sum(state == statelist)!=1) {
errormsg <- "invalid state"
stop(errormsg)
}
#setting apriori values for outcome
outchk <- c("heart attack","heart failure","pneumonia")
#checking index number for outcome in outchk list
indout <- seq_along(outchk)[sapply(outchk, FUN=function(X) outcome %in% X)]
#checking for outcome values : HA, HF, Pn
if (sum(outcome == outchk)!=1) {
errormsg <- "invalid outcome"
stop(errormsg)
}
#replacing all spaces to dots in "outcome" to assing non-spaces valuens to names()
outchkDot <- gsub(" ", ".", outchk)
#creating apriori list of names(outcome)
outcomematr <- as.list(c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
names(outcomematr) <- outchkDot #assigned dot-space-replaced outcomes as names
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
statematr <- outcomeData$State == state
outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
outcomelogic <- outcomevalue == min(outcomevalue)
#finding best Hospital and getting the aphabetically first one if there is more than 1
besthosp <- outcomeData[statematr,][outcomelogic,]$Hospital.Name
if(length(besthosp)==1) {
return(besthosp)
}
else {
bestLetters <- substr(besthosp[1:length(besthosp)], 1, 1)
besthosp <- besthosp[bestLetters == min(bestLetters)]
return(besthosp)
}
#outcomematr[outchkDot[indout]]
#min(outcome[TXstate,]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
#TXstate <- (outcome$State =="TX")
#outcome[TXstate,][as.character(outcomematr[outchkDot[indout]])]
}
outcomeData["WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
best("TN","heart failure")
outcomeData["CENTENNIAL MEDICAL CENTER",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outcomeData[outcomeData$Hospital.Name == "CENTENNIAL MEDICAL CENTER",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outcomeData[outcomeData$Hospital.Name == "CENTENNIAL MEDICAL CENTER",]$STate
outcomeData[outcomeData$Hospital.Name == "CENTENNIAL MEDICAL CENTER",]$State
outcomeData[outcomeData$Hospital.Name == " WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outcomeData[outcomeData$Hospital.Name == "WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
outcomeData[outcomeData$Hospital.Name == "CENTENNIAL MEDICAL CENTER",]$State
outcomeData[outcomeData$Hospital.Name == "CENTENNIAL MEDICAL CENTER",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
outcomeData[outcomeData$Hospital.Name == "CENTENNIAL MEDICAL CENTER",]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
rankbystate("WY",1)
outranked <- outcomeData[with(outcomeData, order(outcomesubset)), ]
rankbystate("WY",1)
rankbystate("WY",2)
rankbystate("WY",1)
rankbystate("WY",10)
best("WY","heart failure")
outranked[outranked$State== "WY",][1,]["Hospital.Name"][1,]
head(outranked)
head(outranked$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name )), ]
rankall <- function(outcome, num = "best") {
outchk <- c("heart attack","heart failure","pneumonia")
#checking index number for outcome in outchk list
indout <- seq_along(outchk)[sapply(outchk, FUN=function(X) outcome %in% X)]
#checking for outcome values : HA, HF, Pn
if (sum(outcome == outchk)!=1) {
errormsg <- "invalid outcome"
stop(errormsg)
}
#replacing all spaces to dots in "outcome" to assing non-spaces valuens to names()
outchkDot <- gsub(" ", ".", outchk)
#creating apriori list of names(outcome)
outcomematr <- as.list(c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
names(outcomematr) <- outchkDot #assigned dot-space-replaced outcomes as names
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
#statematr <- outcomeData$State == state
#outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
#outcomelogic <- outcomevalue == min(outcomevalue)
#sorting outData by outcome and hospital name
#outcomestate <- outcomeData[statematr,]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
statelist <- sort(unique(outcomeData$State))
if(num=="best") {
rankedall <- vapply(as.list(statelist),best, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
}
if(num=="worst") {
rankedall <- vapply(as.list(statelist),worst, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
#outranked <- outcomeData[with(outcomeData, order(-outcomesubset, Hospital.Name)), ]
#out <- data.frame(as.character(outranked$Hospital.Name),as.character(outranked$State))
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
#return(out)
}
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name )), ]
rankbystate <- function (state, numb) {
numb = num
outranked[outranked$State==state,][numb,]["Hospital.Name"][1,]
}
rankedall <- vapply(as.list(statelist),rankbystate, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
return(out)
}
head(rankall("heart failure", 10)
)
head(rankall("heart failure", 1)
)
best("AK", "heart failure")
best("AL", "heart failure")
best("CO", "heart failure")
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[complete.cases(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
#statematr <- outcomeData$State == state
#outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
#outcomelogic <- outcomevalue == min(outcomevalue)
#sorting outData by outcome and hospital name
#outcomestate <- outcomeData[statematr,]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
as.character(outcomematr[outchkDot[indout]])
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
statelist <- sort(unique(outcomeData$State))
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name )), ]
rankbystate <- function (state, numb) {
numb = num
outranked[outranked$State==state,][numb,]["Hospital.Name"][1,]
}
rankedall <- vapply(as.list(statelist),rankbystate, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
outranked[outranked$State=="AK",][1,]["Hospital.Name"][1,]
outranked[outranked$State=="AK",][10,]["Hospital.Name"][1,]
outranked[outranked$State=="AK",][9,]["Hospital.Name"][1,]
outranked[outranked$State=="AK",][2,]["Hospital.Name"][1,]
outranked[outranked$State=="AK",][3,]["Hospital.Name"][1,]
head(rankall("heart attack", 20), 10)
outranked[outranked$State=="NV",][10,]["Hospital.Name"][1,]
outranked$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outranked[outranked$State=="NV",][11,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][12,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][13,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][10,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][9,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][10,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][8,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][12,]["Hospital.Name"][1,]
outranked[outranked$State=="NV",][14,]["Hospital.Name"][1,]
outranked$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outranked[outranked$Hospital.Name == "RENOWN SOUTH MEADOWS MEDICAL CENTER "]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
oDHA <- as.numeric(outcomeData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
oDHF <- as.numeric(outcomeData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
oDP <- as.numeric(outcomeData$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
#converting to numeric values for heart attack
outcomeData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack <- oDHA
#converting to numeric for hear faliure
outcomeData$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure <- oDHF
#converting to numeric for pneumonia
outcomeData$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia <- oDP
#creating function for increment (just for fun  =) )
`%+=%` = function(e1,e2) eval.parent(substitute(e1 <- e1 + e2))
#clearin from NAs from HA, HF, P
#outcomeData <- outcomeData[complete.cases(oDHA) & complete.cases(oDHF) & complete.cases(oDP), ]
outcomeData[outcomeData$Hospital.Name == "RENOWN SOUTH MEADOWS MEDICAL CENTER "]$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name )), ]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name )), ]
outranked[outranked$State=="NV",][10,]["Hospital.Name"][1,]
rankall <- function(outcome, num = "best") {
outchk <- c("heart attack","heart failure","pneumonia")
#checking index number for outcome in outchk list
indout <- seq_along(outchk)[sapply(outchk, FUN=function(X) outcome %in% X)]
#checking for outcome values : HA, HF, Pn
if (sum(outcome == outchk)!=1) {
errormsg <- "invalid outcome"
stop(errormsg)
}
#replacing all spaces to dots in "outcome" to assing non-spaces valuens to names()
outchkDot <- gsub(" ", ".", outchk)
#creating apriori list of names(outcome)
outcomematr <- as.list(c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"))
names(outcomematr) <- outchkDot #assigned dot-space-replaced outcomes as names
#generating vectro of values for specific state and outcome (with NAs)
outcomevalueALL <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
outcomeData <- outcomeData[!is.na(outcomevalueALL),] #creating non-NA source dataframe
#creating logical matrix for specific state
#statematr <- outcomeData$State == state
#outcomevalue <- outcomeData[statematr,][as.character(outcomematr[outchkDot[indout]])]
#outcomelogic <- outcomevalue == min(outcomevalue)
#sorting outData by outcome and hospital name
#outcomestate <- outcomeData[statematr,]
outcomesubset <- outcomeData[as.character(outcomematr[outchkDot[indout]])]
statelist <- sort(unique(outcomeData$State))
if(num=="best") {
rankedall <- vapply(as.list(statelist),best, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
}
if(num=="worst") {
rankedall <- vapply(as.list(statelist),worst, outcome, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
return(out)
#outranked <- outcomeData[with(outcomeData, order(-outcomesubset, Hospital.Name)), ]
#out <- data.frame(as.character(outranked$Hospital.Name),as.character(outranked$State))
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
#return(out)
}
outranked <- outcomeData[with(outcomeData, order(outcomesubset, Hospital.Name )), ]
rankbystate <- function (state, numb) {
numb = num
outranked[outranked$State==state,][numb,]["Hospital.Name"][1,]
}
rankedall <- vapply(as.list(statelist),rankbystate, FUN.VALUE = character(1))
out <- data.frame(hospital = rankedall,state = statelist)
#names(out) <-c("hospital", "state")
#rownames(out) <- outranked$State
return(out)
}
head(rankall("heart failure", 10)
)
submit()
